/* Aluno: Ingrid Santana Lopes - 14/0083065
Universidade de Brasilia
Organização e Arquitetura de Computadores - 1/2016
Professor: Ricardo Jacobi */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <math.h>
#include "basic.h"

int Complemento2(int x) {
  int m = x >> 31;
  return (~m & x) | (((x & 0x80000000) - x) & m);
}


int BinaryToDecimal(char binary[], int tam){
	int i, decimal=0;
	for(i=0;i<tam;i++){
		if(binary[tam-1-i]=='1'){
			decimal+=pow(2,(i));
		}
	}
	decimal = Complemento2(decimal);
return decimal;
}

void HexaToBinary (char hexa, char binary[4]){
	
	switch  (hexa) {
	case '0': strcpy(binary, "0000"); break;
	case '1': strcpy(binary, "0001"); break;
	case '2': strcpy(binary, "0010"); break;
	case '3': strcpy(binary, "0011"); break;
	case '4': strcpy(binary, "0100"); break;
	case '5': strcpy(binary, "0101"); break;
	case '6': strcpy(binary, "0110"); break;
	case '7': strcpy(binary, "0111"); break;
	case '8': strcpy(binary, "1000"); break;
	case '9': strcpy(binary, "1001"); break;
	case 'a': strcpy(binary, "1010"); break;
	case 'b': strcpy(binary, "1011"); break;
	case 'c': strcpy(binary, "1100"); break;
	case 'd': strcpy(binary, "1101"); break;
	case 'e': strcpy(binary, "1110"); break;
	case 'f': strcpy(binary, "1111"); break;
	default: ; break;
	}
}

bool detectaOverflow(uint32_t a, uint32_t b) {
    size_t a_bits=highestOneBitPosition(a), b_bits=highestOneBitPosition(b);
    return (a_bits<32 && b_bits<32);
}

size_t highestOneBitPosition(uint32_t a) {
    size_t bits=0;
    while (a!=0) {
        ++bits;
        a>>=1;
    };
    return bits;
}
